package edu.kh.jdbc;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

public class JDBCExample1 {
	
	public static void main(String[] args) {
		
		/*
		 * JDBC (Java DataBase Connectivity) 
		 * 
		 * - Java에서 DB에 연결할 수 있게 해주는
		 * 	 Java API(Java에서 제공하는 코드)이다.
		 * -> java.sql 패키지에 존재함
		 * 
		 * 
		 * 
		 * 
		 * */
	
		// Java 코드를 이용해
		// EMPLOYEE 테이블에서
		// 사번, 이름, 부서코드, 직급코드, 급여, 입사일 조회 후
		// 이클립스 콘솔에 출력해보기
		//////// 드라이버 종류, DB를 사용하는 컴퓨터의 ip주소, 포트번호, dbmsd의 종류, employee 테이블이 있는 계정과 비번
	
		/* 1. JDBS 객체를 참조할 참조용 변수 선언하기 */
		
		// java.spl.Connection 필요함.
		// Connection은 특정 DBMS와 연결하기 위한 정보를 저장하고 있는 객체이다.
		// == DBeaver에서 사용하는 DB 연결과 같은 역할의 객체이다.
		// (Connection은 DB의 서버 주소, 포트번호, DB 이름, 계정명, 비밀번호 등을 가지고 있음.)
		Connection conn = null;
		
		// java.sql.Statement 
		// - 1) Statement의 역할 : SQL을 Java -> DB에 전달
		//   2) DB에서 SQL을 수행한 결과를 반환하여 다시 Java로 받아옴.(DB -> Java)
		Statement stmt = null;
		
		// java.spl.ResultSet
		// - SELECT 조회 결과를 저장하는 객체를 ResultSet이라고 함.
		ResultSet rs = null;
		
		/* 2. DriverManager 객체를 이용해서 Connection 객체 생성하기 */
		// DriverManager는 java.sql.DriverManager에 있음
		// - DB 연결 정보와 JDBC 드라이버를 이용해서
		// 	   원하는 DB와 연결할 수 있는 Connection 객체를 생성하는 객체
		
		// 2-1) Oracle JDBC Driver 객체를 메모리에 로드해두기
		 try {
			Class.forName("oracle.jdbc.driver.OracleDriver");
			// 괄호 안에 오타있을 시 ClassNotFoundException 예외 발생함
			// Class.forName("패키지명 + 클래스명"); 
			// Class.forName() 메서드는 ()안의 해당 클래스를 읽어 메모리에 적재(로드)하는 역할이다.
			// -> JVM이 프로그램 동작에 사용할 객체를 생성하는 구문이다.
			// 클래스명.메소드명() -> 해당 메서드는 static메서드. 
			
			// oracle.jdbc.driver.OracleDriver
			// - Oracle DBMS 연결 시 필요한 코드가 담겨있는 클래스
			// 	ojdbc 라이브러리 파일 내에 존재함.
			//  -> 자바가 아니라 Oracle에서 만들어서 제공하는 클래스
			//    즉, Classpath에 ojdbc 드라이브를 추가하지 않으면 classnotfounder Exception이 발생함.
			
			// 2-2) DB 연결 정보 작성하기
			String type = "jdbc:oracle:thin:@";	// 드라이버의 종류
			
			String host = "localhost"; // DB 서버 컴퓨터의 IP 또는 도메인주소 
									   // localhost == 현재 컴퓨터
			
			String port = ":1521"; 	// 프로그램 연결을 위한 port 번호
			
			String dbName = ":XE"; // DBMS 이름 (XE == eXpress Edition)
			
			// jdbc:oracle:thin:@localhost:1521:XE
			
			String userName = "kh";		// 사용자 계정명
			String password "1234";	// 계정 비밀번호
			
			// 2-3) DB 연결 정보와 DriverManager 객체를 이용해서 Connection 객체 생성하기
			conn = DriverManager.getConnection(type + host + port + dbName,
						userName,
						password);
			
			// Connection 객체가 잘 생성되었는지 확인하기 (객체 주소 반환)
			System.out.println(conn);
			
			
			
		} catch (ClassNotFoundException e) {
			System.out.println("해당 Class를 찾을 수 없습니다.");
			// Class.forName("oracle.jdbc.driver.OracleDriver"); ()안에 오타가 있었다면 println 안의 문자열 출력됨.
			e.printStackTrace();
			
		} catch (SQLException e) {
			// SQLException : DB 연결과 관련된 모든 예외의 최상위 부모
			e.printStackTrace();
		}
	
		
		
		
		
		
		
		
		
		
		
		
	}
}
